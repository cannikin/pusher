'use strict'

window.RetentionRocket = {}

RetentionRocket.WebPush = {

  CONTAINER_ID: 'retention-rocket-push-prompt',
  CANCEL_BUTTON_ID: 'retention-rocket-push-cancel',
  ENABLE_BUTTON_ID: 'retention-rocket-push-enable',
  DEFAULT_STYLE: {
    container: {
      'display': 'block',
      'position': 'absolute',
      'top': '20px',
      'left': '80px',
      'z-index': '2147483647',
      'width': '320px',
      'padding': '15px',
      'border': '1px solid #cccccc',
      'border-radius': '4px',
      'background-color': '#ffffff',
      'font-family': 'sans-serif',
      'color': '#000000',
      'box-shadow': '0 5px 10px rgba(0,0,0,0.25)'
    },
    title: {
      'font-size': '18px',
      'font-weight': '600',
      'color': '#666666',
      'margin': '0 0 10px',
      'padding': '0'
    },
    body: {
      'font-size': '14px',
      'margin': '0 0 20px',
      'padding': '0'
    },
    buttonContainer: {
      'text-align': 'right',
    },
    cancelButton: {
      'display': 'inline-block',
      'padding': '7px 15px',
      'text-align': 'center',
      'border': '1px solid #cccccc',
      'background-color': '#ffffff',
      'font-size': '14px',
      'color': '#aaaaaa',
      'text-decoration': 'none',
      'border-radius': '2px',
      'margin-right': '5px',
      'cursor': 'pointer'
    },
    enableButton: {
      'display': 'inline-block',
      'padding': '7px 15px',
      'text-align': 'center',
      'border': '1px solid #009900',
      'background-color': '#009900',
      'font-size': '14px',
      'color': '#ffffff',
      'text-decoration': 'none',
      'border-radius': '2px',
      'cursor': 'pointer'
    }
  },
  vapidKey: new Uint8Array(<%= Base64.urlsafe_decode64(ENV['VAPID_PUBLIC_KEY']).bytes %>),
  isPermissionSet: Notification.permission !== 'default',

  initialize: function(options, allowCallback, cancelCallback) {
    if (this.verifySupport()) {
      if (!this.isPermissionSet) {
        this.prompt(options, allowCallback, cancelCallback)
      } else {
        this.request()
      }
    }
  },

  prompt: function(options, allowCallback, cancelCallback) {
    var elements = this.createPrompt(options)

    elements.enableButton.addEventListener('click', function(event) {
      this.promptAction(event, 'accept', allowCallback || function() {})
      this.request()
    }.bind(this))

    elements.cancelButton.addEventListener('click', function(event) {
      this.promptAction(event, 'cancel', cancelCallback || function() {})
    }.bind(this))

    this.log('web-push-prompt', { action: 'show' })
  },

  promptAction: function(event, action, callback) {
    event.preventDefault()
    this.log('web-push-prompt', { action: action })
    document.getElementById(this.CONTAINER_ID).remove()
    callback()
  },

  request: function(callback) {
    return new Promise(function(resolve, reject) {
      const permissionResult = Notification.requestPermission(function(result) {
        resolve(result);
      });

      if (permissionResult) {
        permissionResult.then(resolve, reject);
      }
    })
    .then(function(permissionResult) {
      this.log('web-push-permission', { permission: permissionResult })
      if (permissionResult === 'granted') {
        this.register()
      }
    }.bind(this))
    .catch(function(error) {
      this.log('web-push-permission', { error: error })
    }.bind(this))
  },

  // registers service worker and subscribes to push notifications
  register: function() {
    return navigator.serviceWorker.register('/a/rr/serviceworker.js')
    .then(function(registration) {
      const subscribeOptions = {
        userVisibleOnly: true,
        applicationServerKey: this.vapidKey
      }

      return registration.pushManager.subscribe(subscribeOptions);
    }.bind(this))
    .then(function(pushSubscription) {
      this.serverSubscribe(pushSubscription)
      return pushSubscription;
    }.bind(this))
    .catch(function(error) {
      console.log(error)
    })
  },

  // checks that all required APIs are available in this browser
  verifySupport: function() {
    return 'serviceWorker' in navigator &&
           'showNotification' in ServiceWorkerRegistration.prototype &&
           'PushManager' in window
  },

  // Called internally to add subscription details to the server
  serverSubscribe: function(subscription) {
    fetch('/subscribe', { method: 'POST', credentials: 'same-origin',
      headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(subscription) })
  },

  createPrompt(options) {
    var container = document.createElement('div'),
        title = document.createElement('div'),
        body = document.createElement('p'),
        buttonContainer = document.createElement('div'),
        cancelButton = document.createElement('a'),
        enableButton = document.createElement('a'),
        styles = JSON.parse(JSON.stringify(this.DEFAULT_STYLE))

    Object.assign(styles.container, options.style.container)
    Object.assign(styles.title, options.style.title)
    Object.assign(styles.body, options.style.body)
    Object.assign(styles.buttonContainer, options.style.buttonContainer)
    Object.assign(styles.cancelButton, options.style.cancelButton)
    Object.assign(styles.enableButton, options.style.enableButton)

    container.setAttribute('id', this.CONTAINER_ID)
    container.setAttribute('style', this.objectToStyle(styles.container))

    title.setAttribute('style', this.objectToStyle(styles.title))
    title.textContent = options.title
    container.appendChild(title)

    body.setAttribute('style', this.objectToStyle(styles.body))
    body.textContent = options.body
    container.appendChild(body)

    cancelButton.setAttribute('style', this.objectToStyle(styles.cancelButton))
    cancelButton.setAttribute('id', this.CANCEL_BUTTON_ID)
    cancelButton.textContent = options.cancelLabel

    enableButton.setAttribute('style', this.objectToStyle(styles.enableButton))
    enableButton.setAttribute('id', this.ENABLE_BUTTON_ID)
    enableButton.textContent = options.enableLabel

    buttonContainer.setAttribute('style', this.objectToStyle(styles.buttonContainer))
    buttonContainer.appendChild(cancelButton)
    buttonContainer.appendChild(enableButton)
    container.appendChild(buttonContainer)

    document.body.appendChild(container)

    return { container: container, enableButton: enableButton, cancelButton: cancelButton }
  },

  // Transforms an object like { foo: 'bar', baz: 'qux' } to a CSS style attribute like
  // "foo:bar; baz:qux;"
  objectToStyle(object) {
    var styles = []

    for (var prop in object) {
      if (object.hasOwnProperty(prop)) {
        styles.push(prop + ':' + object[prop])
      }
    }

    return styles.join('; ')
  },

  log(action, properties) {
    if (typeof ahoy !== 'undefined') {
      ahoy.track(action, properties)
    } else {
      console.log(action, properties)
    }
  }

}
